{"version":3,"sources":["Component/Menu.js","Component/Suggestion.js","Component/Main.js","Hash_dictionary/Hash_dictionary.js","Component/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Menu","AppBar","position","Typography","variant","align","style","padding","Suggestion","file","Object","keys","dictionary_data","filter","item","Math","floor","random","Container","color","join","hash_dictionary","data","slot_size","this","alphabet_size","processed","hash_function","string_value","string_to_integer_and_hash","primary_table","string_data","mod","reduce","hash_value","char_value","charCodeAt","Promise","resolve","reject","start_time","Date","getTime","return_data","work","time","store","Array","map","x","a","b","m","forEach","index","unit_data","push","stored","length","max_size","cur_max","max","Infinity","prime","prime_larger_than_or_equal","table","result","does_not_collide","container","secondary_hash_function","key","num","is_prime","i","string_key","index_1","index_2","to_dump","require","writeFileSync","JSON","stringify","dumped","readFileSync","parse","dataset","Main","useState","bn","setBn","en","setEn","loading","setLoading","error","setError","word","finished","stat","setStat","useEffect","start_process","then","res","height","textAlign","fontSize","CircularProgress","TextField","id","placeholder","onChange","e","str","target","value","trim","Button","onClick","output","search","toLocaleLowerCase","width","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","TableBody","elevation","backgroundColor","Footer","marginTop","bottom","href","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d20845dc.chunk.js","sourcesContent":["import {AppBar, Typography} from '@material-ui/core';\n\nfunction Menu(){\n    return (\n        <AppBar position='relative'>\n            <Typography variant=\"h2\" align=\"center\" style={{padding: '20px 20px'}}>\n                Hash Dictionary\n            </Typography>\n        </AppBar>\n    )\n}\n\nexport default Menu;","import Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport dictionary_data from '../Hash_dictionary/E2Bdataset.json'\n\nfunction Suggestion() {\n     const file = Object.keys(dictionary_data).filter(item => {\n        const probability = Math.floor(Math.random() * 1000) + 1\n        return probability === 69\n    })\n    return (\n        <Container>\n            <Typography style={{color: \"grey\"}} variant=\"h6\">Suggestion</Typography> <br/>\n            <Typography style={{color: \"grey\"}} align='justify'>\n                {file.join(', ')}\n            </Typography>\n        </Container>\n    )\n}\n\nexport default Suggestion;","\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport Paper from '@material-ui/core/Paper';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport {useState, useEffect} from 'react'\n\nimport Hash_dictionary from '../Hash_dictionary/Hash_dictionary'\nimport dataset from '../Hash_dictionary/E2Bdataset.json'\n\nconst hash_dictionary = new Hash_dictionary(dataset)\n\nexport default function Main() {\n\n    const [bn, setBn] = useState(\"\")\n    const [en, setEn] = useState(\"\")\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(\"\")\n    const [stat, setStat] = useState({time: null, word: null, finished: false})\n\n    // const process_starter = useMemo( () => {\n    //     hash_dictionary.start_process().then((res) => {\n    //         setLoading(false)\n    //     })\n    // }, [])\n    \n\n    useEffect(() => {\n        hash_dictionary.start_process().then((res) => {\n            setStat({\n                time: res.time,\n                word: res.store,\n                finished: true\n            })\n            setLoading(false)\n        })\n    }, [])\n\n    const handleClick = () => {\n        const output = hash_dictionary.search(en.toLocaleLowerCase());\n        if(output) {\n            setBn(output)\n            setError(\"\")\n        }\n        else {\n            setBn(\"\")\n            setError(\"Word not found. You can use words from suggestion list.\")\n        }\n    }\n\n    const inputEn = (str) => {\n        setBn(\"\")\n        setError(\"\")\n        setEn(str.trim())\n    }\n\n    return (\n        <div style={{height: '500px'}}>\n            <Typography variant=\"h5\" align=\"center\" style={{padding: '10px 10px'}}>English to Bangla dictionary implementing Perfect Hashing</Typography>\n        { stat.finished && \n            <Typography style={{color: 'grey', textAlign: 'center', padding: '20px 20px', fontSize: '12px'}} variant=\"h6\" align=\"center\"> {stat.word} words processed on {stat.time} miliseconds </Typography>\n        }\n        <Container style={{ padding: '100px 100px', align: 'center'}} align=\"center\">\n            {loading && \n                <div>\n                    <Typography variant=\"caption\">You have a sip of your tea, meanwhile I hash the data for you.</Typography>\n                    <CircularProgress color=\"secondary\" />\n                </div>\n\n            }\n            {!loading &&\n                <div><TextField id=\"standard-basic\" placeholder=\"English\" onChange={e => inputEn(e.target.value)}></TextField>\n                <br/>\n                <Button color=\"primary\" onClick={handleClick} style={{width: '100px'}}>Find Word</Button>\n                <br/><br/><br/>\n                { bn && \n                    <TableContainer component={Paper}>\n                    <Table aria-label=\"simple table\">\n                      <TableHead>\n                        <TableRow>\n                          <TableCell>English</TableCell>\n                          <TableCell>Bangla</TableCell>\n                        </TableRow>\n                      </TableHead>\n                      <TableBody>\n                          <TableRow>\n                            <TableCell >{en}</TableCell>\n                            <TableCell >{bn}</TableCell>\n                          </TableRow>\n                      </TableBody>\n                    </Table>\n                  </TableContainer>\n                }\n\n                { error && \n                    <Paper elevation={3} style={{backgroundColor: 'red', padding: '10px 10px'}}>\n                        <Typography style={{color: 'white'}}>{error}</Typography>\n                    </Paper>\n                }\n                \n                \n                </div>\n            }\n        </Container>\n        </div>\n    )\n}\n\n{}","'use strict';\n\n/**\n * Author   : Rahat Hossain\n * Date     : Feb-16, 2021\n */\n\nexport default class Hash_dictionary {\n\n    /**\n     * \n     * @param Object data \n     * @param Integer slot_size \n     * \n     * taking for considaration that only 128 chars on input string\n     * \n     */\n    constructor(data, slot_size){\n        this.slot_size = slot_size\n        this.alphabet_size = 128 // defining alphabet size as 128\n        this.processed = false\n        this.hash_function = (string_value) => this.string_to_integer_and_hash(string_value, this.slot_size)\n        this.primary_table = null\n        this.data = data;\n\n        // set default slot size if not specified\n        if(!this.slot_size) {\n            this.slot_size = 1048583 // 2 ^ 20 + 7\n        }\n        \n    }\n\n    /**\n     * \n     * @param String string_data value to be turned into integer\n     * @param Integer mod \n     */\n    string_to_integer_and_hash(string_data, mod) {\n        return [...string_data].reduce((hash_value, char_value) => {\n            return ((hash_value * this.alphabet_size) % mod + char_value.charCodeAt(0)) % mod\n        }, 0)\n    }\n\n    /**\n     * Will start the process of constructing hash table, driver code\n     * Returns a promise\n     */\n    start_process() {\n        return new Promise((resolve, reject) => {\n            const start_time = new Date().getTime()\n            const return_data = this.work()\n            this.processed = true\n            const end_time = new Date().getTime()\n            resolve({ time: end_time - start_time, store: return_data})\n        })\n    }\n\n    /**\n     * Hash worker\n     */\n    work() {\n\n        this.primary_table = [...Array(this.slot_size)].map(x => {\n            return {\n                a: 0,\n                b: 0,\n                m: 1,\n                data: []\n            }\n        });\n        \n        Object.keys(this.data).forEach(item => { \n            const index = this.hash_function(item)\n            const unit_data = [item, this.data[item]]\n            this.primary_table[index].data.push(unit_data)\n        })\n        const stored = Object.keys(this.data).length\n        delete this.data;\n\n        const max_size = this.primary_table.reduce((cur_max, item) => {\n            return Math.max(cur_max, item.data.length)\n        }, -Infinity)\n\n        const prime = this.prime_larger_than_or_equal(max_size + 1); // larger than max_size\n\n        this.primary_table.forEach(table => {\n            if(table.data.length) {\n                table.m = table.data.length * table.data.length;\n                while(true){\n                    table.b = Math.floor(Math.random() * prime)\n                    table.a = 1 + Math.floor(Math.random() * (prime - 1))\n                    const result = this.does_not_collide(table)\n                    if(result !== null) {\n                        table.data = result\n                        return;\n                    }\n                }\n            }\n        })\n        return stored;\n\n    }\n\n    /**\n     * Checker function\n     * @param {*} table \n     */\n\n    does_not_collide(table) {\n        const container = [... Array(table.m)].map(x => null)\n        table.data.forEach(item => {\n            const index = this.secondary_hash_function( table.a, table.b, table.m, this.string_to_integer_and_hash(item[0], table.m) ) // dependency indection go brrrrr...\n            if(container[index] === null) container[index] = item[1]\n            else return null;\n        })\n        return container;\n    }    \n\n    /**\n     * Calculates secondary hash value\n     * @param Integer a \n     * @param Integer b \n     * @param Integer m \n     * @param Integer key  \n     */\n    secondary_hash_function(a, b, m, key) {\n        return (key * a + b) % m;\n    }\n\n    /**\n     * \n     * @param {*} num \n     */\n    prime_larger_than_or_equal(num) {\n        if(this.is_prime(num)) return num;\n        return this.prime_larger_than_or_equal(num + 1);\n    }\n\n    /**\n     * \n     * @param {*} num \n     */\n    is_prime(num){\n        if(num <= 1) return false;\n        if(num == 2) return true;\n        if(num % 2 == 0) return false\n        for(let i = 3; i * i <= num; i++) {\n            if(num % i == 0) return false;\n        }\n        return true\n    }\n\n    search(string_key) {\n        const index_1 = this.hash_function(string_key)\n        const index_2 = this.secondary_hash_function( // dependency indection go brrrr...\n            this.primary_table[index_1].a, \n            this.primary_table[index_1].b,\n            this.primary_table[index_1].m,\n            this.string_to_integer_and_hash(string_key, this.primary_table[index_1].m)\n        )\n        return this.primary_table[index_1].data[index_2];\n    }\n\n    /**\n     * Will save hash table into a file\n     */\n    dump(){\n        const file_name = \"hashdumpyard.json\"\n        const to_dump = {primary_table: this.primary_table}\n        const fs = require('fs')\n        fs.writeFileSync(file_name, JSON.stringify(to_dump))\n    }\n\n    /**\n     * will load hash table from file\n     */\n    load(){\n        const file_name = \"hashdumpyard.json\"\n        const fs = require('fs')\n        const dumped = fs.readFileSync(file_name)\n        this.primary_table = JSON.parse(dumped).primary_table\n        this.slot_size = this.primary_table.length\n        this.processed = true\n    }\n\n    /**\n     * Exposed checker function\n     */\n    is_processed() {\n        return this.processed\n    }\n\n}","import AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\n\nexport default function Footer() {\n    return (\n        <AppBar style={{height: '100px', marginTop: '100px', bottom: 0, padding: '10px 10px'}} position='relative' color=\"primary\">\n            <Typography align=\"center\"> Rahat Hossain | CSE-3203 Assignment | Perfect Hashing | <a href=\"https://github.com/rahathossain690/Hash-Dictionary\" style={{color: 'white'}} target=\"_blank\">github</a> </Typography>\n        </AppBar>\n    )\n}","import Menu from './Component/Menu'\nimport Suggestion from './Component/Suggestion'\nimport Main from './Component/Main'\nimport Footer from './Component/Footer'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Menu/>\n      <Main/>\n      <Suggestion/>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}